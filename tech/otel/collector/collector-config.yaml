# receivers is entry point of observability data.
# collector receiver from a lot of resources, it may be application, agent or intermediates system via receivers plugin corresponding.
receivers:
  otlp: # OpenTelemetry Protocol
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
        max_recv_msg_size_mib: 16
        max_concurrent_streams: 100
      # http:
      #   endpoint: 0.0.0.0:4318

# exporters is end of pipelines, it responsibility sending data telemtry (traces, logs, metrics) to monitoring system, storage system, stats system
# structure pipelines: receiver -> processors -> exporters
exporters:
  otlp/jaeger:
    endpoint: jaeger:4317
    tls:
      insecure: true
    retry_on_failure:
      enabled: true
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 300s

  prometheus: # this endpoint for prometheus scrape metrics from application
    endpoint: "0.0.0.0:9464"
    namespace: "otel-collector-demo"

  debug:
    verbosity: detailed

# processors is heart of pipelines. It handle data, tranforms, optimal or enrich
# It can be filter, sampling, batch
# add metadata, resource attributes
# tranforms or reformat data
processors:
  batch:
    timeout: 2s
    send_batch_size: 512
    send_batch_max_size: 1024

  memory_limiter:
    check_interval: 5s
    limit_mib: 2048
    spike_limit_mib: 512

  # add resource processor to enrich metadata
  resource:
    attributes:
      - key: collector.version
        value: 0.108.0
        action: insert

  tail_sampling:
    decision_wait: 10s
    num_traces: 100000
    expected_new_traces_per_sec: 100

    policies:
      - name: errors
        type: status_code
        status_code: { status_codes: [ERROR] }

      - name: very-slow
        type: latency
        latency: { threshold_ms: 5000 }

      - name: slow-requests
        type: latency
        latency: { threshold_ms: 2000 }

      - name: business-critical
        type: string_attribute
        string_attribute:
          key: http.route
          values: ["/complex", "/api-critical"]

      - name: minimal-sample
        type: probabilistic
        probabilistic: { sampling_percentage: 10 } # 10%

# extensions for Collector health monitoring, service discovery, or data forwarding, among others
extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: /health
    check_collector_pipeline:
      enabled: true
      interval: 5m
      exporter_failure_threshold: 5
  pprof:
    endpoint: 0.0.0.0:1777
  zpages: # not recommend turn on this extensions in production mode
    endpoint: 0.0.0.0:55679

service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch, tail_sampling]
      exporters: [otlp/jaeger, debug]
    metrics:
      receivers: [otlp]
      processors: [memory_limiter, resource, batch]
      exporters: [prometheus, debug]

  telemetry: # confiuration internal collector metrics, logs
    metrics:
      readers:
        - pull:
            exporter:
              prometheus:
                host: "0.0.0.0"
                port: 8888
